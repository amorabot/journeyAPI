version: '3.8'

services:
  api:
  # Gets the dockerfile for this service's build
    build: .
    container_name: api
    ports:
      - 8080:8080
  # Can also be done through terminal: [-e varname=value]  flags
    environment:
    # These will be set through a .env file
      JOURNEY_DATABASE_USER: ${JOURNEY_DATABASE_USER}
      JOURNEY_DATABASE_PASSWORD: ${JOURNEY_DATABASE_PASSWORD}
      JOURNEY_DATABASE_HOST: ${JOURNEY_DATABASE_HOST}
      JOURNEY_DATABASE_PORT: ${JOURNEY_DATABASE_PORT}
      JOURNEY_DATABASE_NAME: ${JOURNEY_DATABASE_NAME}
    networks:
      - journey
  

  postgres:
  # Serves the same purpose as the build step, but if the image is already available on the Dockerhub, we can use it directly
    image: postgres:16.2-alpine3.19
    container_name: api_db
    ports:
      - ${JOURNEY_DATABASE_PORT}:5432
    environment:
    # All these values are expected from the postgres image
      POSTGRES_USER: ${JOURNEY_DATABASE_USER}
      POSTGRES_PASSWORD: ${JOURNEY_DATABASE_PASSWORD}
      POSTGRES_DB: ${JOURNEY_DATABASE_NAME}
    networks:
      - journey


networks:
  journey:
    driver: bridge